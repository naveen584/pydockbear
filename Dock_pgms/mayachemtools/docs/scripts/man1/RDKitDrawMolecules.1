.\" Automatically generated by Pod::Man 2.28 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "RDKitDrawMolecules 1"
.TH RDKitDrawMolecules 1 "2018-02-04" "perl v5.22.4" "MayaChemTools"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
RDKitDrawMolecules.py \- Draw molecules and generate an image file
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
RDKitDrawMolecules.py [\fB\-\-alignmentSMARTS\fR <\s-1SMARTS\s0>] [\fB\-\-atomLabelFontSize\fR <number>]
[\fB\-\-bondLineWidth\fR <number>] [\fB\-\-compute2DCoords\fR <yes | no>] [\fB\-\-fontBold\fR <yes or no>]
[\fB\-\-highlightSMARTS\fR <\s-1SMARTS\s0>] [\fB\-\-infileParams\fR <Name,Value,...>] [\fB\-\-kekulize\fR <yes or no>]
[\fB\-\-molImageSize\fR <width,height>] [\fB\-\-numOfMolsPerRow\fR <number>] [\-\-overwrite]
[\fB\-\-showMolName\fR <yes or no>] [\fB\-w\fR <dir>] \fB\-i\fR <infile> \fB\-o\fR <outfile>
.PP
RDKitDrawMolecules.py \fB\-h\fR | \fB\-\-help\fR | \fB\-e\fR | \fB\-\-examples\fR
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Draw molecules in a grid and write them out as an image file. The \s-1SVG\s0 image file
appears to be the best among all the available image file options, as rendered in a
browser. The Python modules aggdraw/cairo are required to generate high quality
\&\s-1PNG\s0 images.
.PP
The options '\-\-atomLabelFontSize' and '\-\-bondLineWidth' don't appear
to work during generation of a \s-1SVG\s0 image.
.PP
The supported input file formats are: Mol (.mol), \s-1SD \s0(.sdf, .sd), \s-1SMILES \s0(.smi,
\&.txt, .csv, .tsv)
.PP
The output image file can be saved in any format supported by the Python Image
Library (\s-1PIL\s0). The image format is automatically detected from the output file extension.
.PP
Some of the most common output image file formats are: \s-1GIF \s0(.gif), \s-1JPEG \s0(.jpg),
\&\s-1PNG \s0(.png), \s-1SVG \s0(.svg), \s-1TIFF \s0(.tif)
.SH "OPTIONS"
.IX Header "OPTIONS"
.IP "\fB\-\-alignmentSMARTS\fR <\s-1SMARTS\s0>  [default: none]" 4
.IX Item "--alignmentSMARTS <SMARTS> [default: none]"
\&\s-1SMARTS\s0 pattern for aligning molecules to a common template.
.IP "\fB\-\-atomLabelFontSize\fR <number>  [default: 12]" 4
.IX Item "--atomLabelFontSize <number> [default: 12]"
Font size for drawing atom labels. This option is ignored during generation of a \s-1SVG\s0
output file.
.IP "\fB\-b, \-\-bondLineWidth\fR <number>  [default: 1.2]" 4
.IX Item "-b, --bondLineWidth <number> [default: 1.2]"
Line width for drawing bonds. This option is ignored during generation of a \s-1SVG\s0
output file.
.IP "\fB\-c, \-\-compute2DCoords\fR <yes | no>  [default: auto]" 4
.IX Item "-c, --compute2DCoords <yes | no> [default: auto]"
Compute 2D coordinates of molecules before drawing. Default: yes for \s-1SMILES\s0
file; no for all other file types.
.IP "\fB\-e, \-\-examples\fR" 4
.IX Item "-e, --examples"
Print examples.
.IP "\fB\-f \-\-fontBold\fR <yes or no>  [default: yes]" 4
.IX Item "-f --fontBold <yes or no> [default: yes]"
Make all text fonts bold during generation of  a \s-1SVG\s0 output file. This option is ignored for
all other output files.
.IP "\fB\-h, \-\-help\fR" 4
.IX Item "-h, --help"
Print this help message.
.IP "\fB\-\-highlightSMARTS\fR <\s-1SMARTS\s0>  [default: none]" 4
.IX Item "--highlightSMARTS <SMARTS> [default: none]"
\&\s-1SMARTS\s0 pattern for highlighting atoms and bonds in molecules. All matched
substructures are highlighted.
.IP "\fB\-i, \-\-infile\fR <infile>" 4
.IX Item "-i, --infile <infile>"
Input file name.
.IP "\fB\-\-infileParams\fR <Name,Value,...>  [default: auto]" 4
.IX Item "--infileParams <Name,Value,...> [default: auto]"
A comma delimited list of parameter name and value pairs for reading
molecules from files. The supported parameter names for different file
formats, along with their default values, are shown below:
.Sp
.Vb 3
\&    SD, MOL: removeHydrogens,yes,sanitize,yes,strictParsing,yes
\&    SMILES: smilesColumn,1,smilesNameColumn,2,smilesDelimiter,space,
\&        smilesTitleLine,auto,sanitize,yes
.Ve
.Sp
Possible values for smilesDelimiter: space, comma or tab.
.IP "\fB\-k, \-\-kekulize\fR <yes or no>  [default: yes]" 4
.IX Item "-k, --kekulize <yes or no> [default: yes]"
Perform kekulization on molecules. This option is ignored during generation of a \s-1SVG\s0
output file.
.IP "\fB\-m, \-\-molImageSize\fR <width,height>  [default: 400,300]" 4
.IX Item "-m, --molImageSize <width,height> [default: 400,300]"
Image size of a molecule in pixels.
.IP "\fB\-n, \-\-numOfMolsPerRow\fR <number>  [default: 2]" 4
.IX Item "-n, --numOfMolsPerRow <number> [default: 2]"
Number of molecules to draw in a row.
.IP "\fB\-o, \-\-outfile\fR <outfile>" 4
.IX Item "-o, --outfile <outfile>"
Output file name.
.IP "\fB\-\-overwrite\fR" 4
.IX Item "--overwrite"
Overwrite existing files.
.IP "\fB\-s, \-\-showMolName\fR <yes or no>  [default: yes]" 4
.IX Item "-s, --showMolName <yes or no> [default: yes]"
Show molecule names under the images.
.IP "\fB\-w, \-\-workingdir\fR <dir>" 4
.IX Item "-w, --workingdir <dir>"
Location of working directory which defaults to the current directory.
.SH "EXAMPLES"
.IX Header "EXAMPLES"
To automatically compute 2D coordinates for molecules in a \s-1SMILES\s0 file and
generate a \s-1SVG\s0 image file containing 2 molecules per row in a grid with cell
size of 400 x 300 pixels, type:
.PP
.Vb 1
\&    % RDKitDrawMolecules.py \-i Sample.smi \-o SampleOut.svg
.Ve
.PP
To automatically compute 2D coordinates for molecules in a \s-1SMILES\s0 file and
generate a \s-1SVG\s0 image file containing 4 molecules per row in a grid with cell
size of 200 x 200 pixels and without any keulization along with highlighting
a specific set of atoms and bonds indicated by a \s-1SMARTS\s0 pattern, type:
.PP
.Vb 2
\&    % RDKitDrawMolecules.py \-n 4 \-m "200,200" \-k no \-\-fontBold no
\&      \-\-highlightSMARTS  \*(Aqc1ccccc1\*(Aq \-i Sample.smi \-o SampleOut.svg
.Ve
.PP
To generate a \s-1PNG\s0 image file for molecules in a \s-1SD\s0 file using existing 2D
coordinates, type
.PP
.Vb 2
\&    % RDKitDrawMolecules.py \-\-compute2DCoords no \-i Sample.sdf
\&      \-o SampleOut.png
.Ve
.PP
To automatically compute 2D coordinates for molecules in a \s-1CSV SMILES\s0 file
with column headers, \s-1SMILES\s0 strings in column 1, and name in column 2 and
generate a \s-1PDF\s0 image file, type:
.PP
.Vb 3
\&    % RDKitDrawMolecules.py \-\-infileParams "smilesDelimiter,comma,
\&      smilesTitleLine,yes,smilesColumn,1,smilesNameColumn,2"
\&      \-i SampleSMILES.csv \-o SampleOut.pdf
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Manish Sud(msud@san.rr.com)
.SH "SEE ALSO"
.IX Header "SEE ALSO"
RDKitConvertFileFormat.py, RDKitRemoveDuplicateMolecules.py, RDKitSearchFunctionalGroups.py,
RDKitSearchSMARTS.py
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (C) 2018 Manish Sud. All rights reserved.
.PP
The functionality available in this script is implemented using RDKit, an
open source toolkit for cheminformatics developed by Greg Landrum.
.PP
This file is part of MayaChemTools.
.PP
MayaChemTools is free software; you can redistribute it and/or modify it under
the terms of the \s-1GNU\s0 Lesser General Public License as published by the Free
Software Foundation; either version 3 of the License, or (at your option) any
later version.
