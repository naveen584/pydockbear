NAME
    AssignAtomTypes.pl - Assign atom types for SD files

SYNOPSIS
    AssignAtomTypes.pl SDFile(s)...

    AtomTypesFingerprints.pl [--AromaticityModel *AromaticityModelType*]
    [-a, --AtomIdentifierType *AtomicInvariantsAtomTypes | DREIDINGAtomTypes
    | EStateAtomTypes | MMFF94AtomTypes | SLogPAtomTypes | SYBYLAtomTypes |
    TPSAAtomTypes | UFFAtomTypes*] [--AtomicInvariantsToUse
    *"AtomicInvariant, AtomicInvariant..."*] [--FunctionalClassesToUse
    *"FunctionalClass1,FunctionalClass2..."*] [--AtomTypesSetToUse
    *ArbitrarySize | FixedSize*] [--BitsOrder *Ascending | Descending*] [-b,
    --BitStringFormat *BinaryString | HexadecimalString*] [--CompoundID
    *DataFieldName or LabelPrefixString*] [--CompoundIDLabel *text*]
    [--CompoundIDMode *DataField | MolName | LabelPrefix |
    MolNameOrLabelPrefix*] [--DataFields *"FieldLabel1,FieldLabel2,..."*]
    [-d, --DataFieldsMode *All | Common | Specify | CompoundID*] [-f,
    --Filter *Yes | No*] [--FingerprintsLabelMode *FingerprintsLabelOnly |
    FingerprintsLabelWithIDs*] [--FingerprintsLabel *text*] [-h, --help]
    [-k, --KeepLargestComponent *Yes | No*] [-m, --mode *AtomTypesCount |
    AtomTypesBits*] [-i, --IgnoreHydrogens *Yes | No*] [--OutDelim *comma |
    tab | semicolon*] [--output *SD |FP | text | all*] [-o, --overwrite]
    [-q, --quote *Yes | No*] [-r, --root *RootName*] [-s, --size *number*]
    [--ValuesPrecision *number*] [-v, --VectorStringFormat
    *IDsAndValuesString | IDsAndValuesPairsString | ValuesAndIDsString |
    ValuesAndIDsPairsString*] [-w, --WorkingDir *DirName*]

DESCRIPTION
    Generate atom types for *SDFile(s)* and create appropriate SD, or
    CSV/TSV text file(s) containing atom types assigned to atoms in
    molecules.

    Multiple SDFile names are separated by spaces. The valid file extensions
    are *.sdf* and *.sd*. All other file names are ignored. All the SD files
    in a current directory can be specified either by **.sdf* or the current
    directory name.

    The current release of MayaChemTools supports generation of atom types
    corresponding to following -a, --AtomIdentifierTypes:

        AtomicInvariantsAtomTypes, DREIDINGAtomTypes, EStateAtomTypes,
        FunctionalClassAtomTypes, MMFF94AtomTypes, SLogPAtomTypes,
        SYBYLAtomTypes, TPSAAtomTypes, UFFAtomTypes

    Based on the values specified for -a, --AtomIdentifierType along with
    other specified parameters such as --AtomicInvariantsToUse and
    --FunctionalClassesToUse, atom ypes are assigned to all non-hydrogen
    atoms or all atoms in a molecule

OPTIONS
    --AromaticityModel *MDLAromaticityModel | TriposAromaticityModel |
    MMFFAromaticityModel | ChemAxonBasicAromaticityModel |
    ChemAxonGeneralAromaticityModel | DaylightAromaticityModel |
    MayaChemToolsAromaticityModel*
        Specify aromaticity model to use during detection of aromaticity.
        Possible values in the current release are: *MDLAromaticityModel,
        TriposAromaticityModel, MMFFAromaticityModel,
        ChemAxonBasicAromaticityModel, ChemAxonGeneralAromaticityModel,
        DaylightAromaticityModel or MayaChemToolsAromaticityModel*. Default
        value: *MayaChemToolsAromaticityModel*.

        The supported aromaticity model names along with model specific
        control parameters are defined in AromaticityModelsData.csv, which
        is distributed with the current release and is available under
        lib/data directory. Molecule.pm module retrieves data from this file
        during class instantiation and makes it available to method
        DetectAromaticity for detecting aromaticity corresponding to a
        specific model.

    --AtomicInvariantsToUse *"AtomicInvariant,AtomicInvariant..."*
        This value is used during *AtomicInvariantsAtomTypes* value of m,
        --mode option. It's a list of comma separated valid atomic invariant
        atom types.

        Possible values for atomic invariants are: *AS, X, BO, LBO, SB, DB,
        TB, H, Ar, RA, FC, MN, SM*. Default value: *AS,X,BO,H,FC*.

        The atomic invariants abbreviations correspond to:

            AS = Atom symbol corresponding to element symbol

            X<n>   = Number of non-hydrogen atom neighbors or heavy atoms
            BO<n> = Sum of bond orders to non-hydrogen atom neighbors or heavy atoms
            LBO<n> = Largest bond order of non-hydrogen atom neighbors or heavy atoms
            SB<n> = Number of single bonds to non-hydrogen atom neighbors or heavy atoms
            DB<n> = Number of double bonds to non-hydrogen atom neighbors or heavy atoms
            TB<n> = Number of triple bonds to non-hydrogen atom neighbors or heavy atoms
            H<n>   = Number of implicit and explicit hydrogens for atom
            Ar     = Aromatic annotation indicating whether atom is aromatic
            RA     = Ring atom annotation indicating whether atom is a ring
            FC<+n/-n> = Formal charge assigned to atom
            MN<n> = Mass number indicating isotope other than most abundant isotope
            SM<n> = Spin multiplicity of atom. Possible values: 1 (singlet), 2 (doublet) or
                    3 (triplet)

        Atom type generated by AtomTypes::AtomicInvariantsAtomTypes class
        corresponds to:

            AS.X<n>.BO<n>.LBO<n>.<SB><n>.<DB><n>.<TB><n>.H<n>.Ar.RA.FC<+n/-n>.MN<n>.SM<n>

        Except for AS which is a required atomic invariant in atom types,
        all other atomic invariants are optional. Atom type specification
        doesn't include atomic invariants with zero or undefined values.

        In addition to usage of abbreviations for specifying atomic
        invariants, the following descriptive words are also allowed:

            X : NumOfNonHydrogenAtomNeighbors or NumOfHeavyAtomNeighbors
            BO : SumOfBondOrdersToNonHydrogenAtoms or SumOfBondOrdersToHeavyAtoms
            LBO : LargestBondOrderToNonHydrogenAtoms or LargestBondOrderToHeavyAtoms
            SB :  NumOfSingleBondsToNonHydrogenAtoms or NumOfSingleBondsToHeavyAtoms
            DB : NumOfDoubleBondsToNonHydrogenAtoms or NumOfDoubleBondsToHeavyAtoms
            TB : NumOfTripleBondsToNonHydrogenAtoms or NumOfTripleBondsToHeavyAtoms
            H :  NumOfImplicitAndExplicitHydrogens
            Ar : Aromatic
            RA : RingAtom
            FC : FormalCharge
            MN : MassNumber
            SM : SpinMultiplicity

        *AtomTypes::AtomicInvariantsAtomTypes* module is used to assign
        atomic invariant atom types.

    --FunctionalClassesToUse *"FunctionalClass1,FunctionalClass2..."*
        This value is used during *FunctionalClassAtomTypes* value of m,
        --mode option. It's a list of comma separated valid functional
        classes.

        Possible values for atom functional classes are: *Ar, CA, H, HBA,
        HBD, Hal, NI, PI, RA*. Default value [ Ref 24 ]:
        *HBD,HBA,PI,NI,Ar,Hal*.

        The functional class abbreviations correspond to:

            HBD: HydrogenBondDonor
            HBA: HydrogenBondAcceptor
            PI :  PositivelyIonizable
            NI : NegativelyIonizable
            Ar : Aromatic
            Hal : Halogen
            H : Hydrophobic
            RA : RingAtom
            CA : ChainAtom

         Functional class atom type specification for an atom corresponds to:

            Ar.CA.H.HBA.HBD.Hal.NI.PI.RA

        *AtomTypes::FunctionalClassAtomTypes* module is used to assign
        functional class atom types. It uses following definitions [ Ref
        60-61, Ref 65-66 ]:

            HydrogenBondDonor: NH, NH2, OH
            HydrogenBondAcceptor: N[!H], O
            PositivelyIonizable: +, NH2
            NegativelyIonizable: -, C(=O)OH, S(=O)OH, P(=O)OH

    --CompoundID *DataFieldName or LabelPrefixString*
        This value is --CompoundIDMode specific and indicates how compound
        ID is generated.

        For *DataField* value of --CompoundIDMode option, it corresponds to
        datafield label name whose value is used as compound ID; otherwise,
        it's a prefix string used for generating compound IDs like
        LabelPrefixString<Number>. Default value, *Cmpd*, generates compound
        IDs which look like Cmpd<Number>.

        Examples for *DataField* value of --CompoundIDMode:

            MolID
            ExtReg

        Examples for *LabelPrefix* or *MolNameOrLabelPrefix* value of
        --CompoundIDMode:

            Compound

        The value specified above generates compound IDs which correspond to
        Compound<Number> instead of default value of Cmpd<Number>.

    --CompoundIDLabel *text*
        Specify compound ID column label for FP or CSV/TSV text file(s) used
        during *CompoundID* value of --DataFieldsMode option. Default:
        *CompoundID*.

    --CompoundIDMode *DataField | MolName | LabelPrefix |
    MolNameOrLabelPrefix*
        Specify how to generate compound IDs and write to FP or CSV/TSV text
        file(s) along with generated fingerprints for *FP | text | all*
        values of --output option: use a *SDFile(s)* datafield value; use
        molname line from *SDFile(s)*; generate a sequential ID with
        specific prefix; use combination of both MolName and LabelPrefix
        with usage of LabelPrefix values for empty molname lines.

        Possible values: *DataField | MolName | LabelPrefix |
        MolNameOrLabelPrefix*. Default: *LabelPrefix*.

        For *MolNameAndLabelPrefix* value of --CompoundIDMode, molname line
        in *SDFile(s)* takes precedence over sequential compound IDs
        generated using *LabelPrefix* and only empty molname values are
        replaced with sequential compound IDs.

        This is only used for *CompoundID* value of --DataFieldsMode option.

    --DataFields *"FieldLabel1,FieldLabel2,..."*
        Comma delimited list of *SDFiles(s)* data fields to extract and
        write to CSV/TSV text file(s) along with generated atom types for
        *text | all* values of --output option.

        This is only used for *Specify* value of --DataFieldsMode option.

        Examples:

            Extreg
            MolID,CompoundName

    -d, --DataFieldsMode *All | Common | Specify | CompoundID*
        Specify how data fields in *SDFile(s)* are transferred to output
        CSV/TSV text file(s) along with generated fingerprints for *text |
        all* values of --output option: transfer all SD data field; transfer
        SD data files common to all compounds; extract specified data
        fields; generate a compound ID using molname line, a compound
        prefix, or a combination of both. Possible values: *All | Common |
        specify | CompoundID*. Default value: *CompoundID*.

    -f, --Filter *Yes | No*
        Specify whether to check and filter compound data in SDFile(s).
        Possible values: *Yes or No*. Default value: *Yes*.

        By default, compound data is checked before calculating fingerprints
        and compounds containing atom data corresponding to non-element
        symbols or no atom data are ignored.

    -h, --help
        Print this help message.

    -i, --IgnoreHydrogens *Yes | No*
        Ignore hydrogens during fingerprints generation. Possible values:
        *Yes or No*. Default value: *Yes*.

        For *yes* value of -i, --IgnoreHydrogens, any explicit hydrogens are
        also used for generation of atom type fingerprints; implicit
        hydrogens are still ignored.

    -k, --KeepLargestComponent *Yes | No*
        Generate fingerprints for only the largest component in molecule.
        Possible values: *Yes or No*. Default value: *Yes*.

        For molecules containing multiple connected components, fingerprints
        can be generated in two different ways: use all connected components
        or just the largest connected component. By default, all atoms
        except for the largest connected component are deleted before
        generation of fingerprints.

    -m, --mode *AtomicInvariantsAtomTypes | DREIDINGAtomTypes |
    EStateAtomTypes | FunctionalClassAtomTypes | MMFF94AtomTypes |
    SLogPAtomTypes | SYBYLAtomTypes | TPSAAtomTypes | UFFAtomTypes | All*
        Specify atom identifier type to use for assignment of atom types to
        hydrogen and/or non-hydrogen atoms during calculation of atom types
        fingerprints. Possible values in the current release are:
        *AtomicInvariantsAtomTypes, DREIDINGAtomTypes, EStateAtomTypes,
        FunctionalClassAtomTypes, MMFF94AtomTypes, SLogPAtomTypes,
        SYBYLAtomTypes, TPSAAtomTypes, UFFAtomTypes or All*. Default value:
        *AtomicInvariantsAtomTypes*.

    --OutDelim *comma | tab | semicolon*
        Delimiter for output CSV/TSV text file(s). Possible values: *comma,
        tab, or semicolon* Default value: *comma*.

    --output *SD | text | all*
        Type of output files to generate. Possible values: *SD, text, or
        all*. Default value: *text*.

    -o, --overwrite
        Overwrite existing files.

    -q, --quote *Yes | No*
        Put quote around column values in output CSV/TSV text file(s).
        Possible values: *Yes or No*. Default value: *Yes*.

    -r, --root *RootName*
        New file name is generated using the root: <Root>.<Ext>. Default for
        new file names: <SDFileName><AtomTypes>.<Ext>. The file type
        determines <Ext> value. The sdf, csv, and tsv <Ext> values are used
        for SD, comma/semicolon, and tab delimited text files,
        respectively.This option is ignored for multiple input files.

    -w, --WorkingDir *DirName*
        Location of working directory. Default: current directory.

EXAMPLES
    To generate atomic invariants atom types count fingerprints of arbitrary
    size in vector string format and create a SampleATFP.csv file containing
    sequential compound IDs along with fingerprints vector strings data,
    type:

        % AtomTypesFingerprints.pl -r SampleATFP -o Sample.sdf

     demo:

AUTHOR
    Manish Sud <msud@san.rr.com>

SEE ALSO
    AtomTypesFingerprints.pl

COPYRIGHT
    Copyright (C) 2018 Manish Sud. All rights reserved.

    This file is part of MayaChemTools.

    MayaChemTools is free software; you can redistribute it and/or modify it
    under the terms of the GNU Lesser General Public License as published by
    the Free Software Foundation; either version 3 of the License, or (at
    your option) any later version.

